/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const CAMPAIGNS_API_BASE_URL = new InjectionToken<string>('CAMPAIGNS_API_BASE_URL');

export interface ICampaignsApiService {
    /**
     * Gets the list of available campaign types.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @return OK
     */
    getCampaignTypes(page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined): Observable<CampaignTypeResultSet>;
    /**
     * Creates a new campaign type.
     * @param body (optional) Contains info about the campaign type to be created.
     * @return OK
     */
    createCampaignType(body?: UpsertCampaignTypeRequest | undefined): Observable<CampaignType>;
    /**
     * Updates an existing campaign type.
     * @param campaignTypeId The id of the campaign type.
     * @param body (optional) Contains info about the campaign type to update.
     * @return No Content
     */
    updateCampaignType(campaignTypeId: string, body?: UpsertCampaignTypeRequest | undefined): Observable<CampaignType>;
    /**
     * Permanently deletes a campaign type.
     * @param campaignTypeId The id of the campaign type.
     * @return No Content
     */
    deleteCampaignType(campaignTypeId: string): Observable<void>;
    /**
     * Gets the list of all campaigns using the provided Indice.Types.ListOptions.
     * @param filter_DeliveryChannel (optional) The delivery channel of a campaign.
     * @param filter_Published (optional) Determines if a campaign is published.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @return OK
     */
    getCampaigns(filter_DeliveryChannel?: CampaignDeliveryChannel | undefined, filter_Published?: boolean | undefined, page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined): Observable<CampaignResultSet>;
    /**
     * Creates a new campaign.
     * @param body (optional) Contains info about the campaign to be created.
     * @return Created
     */
    createCampaign(body?: CreateCampaignRequest | undefined): Observable<Campaign>;
    /**
     * Gets a campaign with the specified id.
     * @param campaignId The id of the campaign.
     * @return OK
     */
    getCampaignById(campaignId: string): Observable<CampaignDetails>;
    /**
     * Updates an existing campaign.
     * @param campaignId The id of the campaign to update.
     * @param body (optional) Contains info about the campaign to update.
     * @return No Content
     */
    updateCampaign(campaignId: string, body?: UpdateCampaignRequest | undefined): Observable<void>;
    /**
     * Permanently deletes a campaign.
     * @param campaignId The id of the campaign.
     * @return No Content
     */
    deleteCampaign(campaignId: string): Observable<void>;
    /**
     * Uploads an attachment for the specified campaign.
     * @param campaignId The id of the campaign.
     * @param file (optional) 
     * @return OK
     */
    uploadCampaignAttachment(campaignId: string, file?: FileParameter | undefined): Observable<AttachmentLink>;
    /**
     * Gets the statistics for a specified campaign.
     * @param campaignId The id of the campaign.
     * @return OK
     */
    getCampaignStatistics(campaignId: string): Observable<CampaignStatistics>;
    /**
     * Gets the statistics for a specified campaign in the form of an Excel file.
     * @param campaignId The id of the campaign.
     * @return OK
     */
    exportCampaignStatistics(campaignId: string): Observable<FileResponse>;
    /**
     * Gets the attachment associated with a campaign.
     * @param fileGuid Contains the photo's Id.
     * @param format Contains the format of the uploaded attachment extension.
     * @return OK
     */
    getCampaignAttachment(fileGuid: string, format: string): Observable<FileResponse>;
    /**
     * Gets the list of all user messages using the provided Indice.Types.ListOptions.
     * @param filter_TypeId (optional) The id of a campaign type.
     * @param filter_ActiveFrom (optional) Active from.
     * @param filter_ActiveTo (optional) Active to.
     * @param filter_ShowExpired (optional) Controls whether to show expired messages (that is outside of active period). Defaults to false.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @return OK
     */
    getMessages(filter_TypeId?: string | undefined, filter_ActiveFrom?: Date | undefined, filter_ActiveTo?: Date | undefined, filter_ShowExpired?: boolean | undefined, page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined): Observable<UserMessageCampaignTypeIEnumerableResultSet>;
    /**
     * Gets the message with the specified id.
     * @param messageId The id of the message.
     * @return OK
     */
    getMessageById(messageId: string): Observable<UserMessage>;
    /**
     * Marks the specified message as deleted.
     * @param messageId The id of the message.
     * @return No Content
     */
    deleteMessage(messageId: string): Observable<void>;
    /**
     * Marks the specified message as read.
     * @param messageId The id of the message.
     * @return No Content
     */
    markMessageAsRead(messageId: string): Observable<void>;
    /**
     * Returns the number of messages that have not been read by the user.
     * @return OK
     */
    getNumberOfUnreadMessages(): Observable<UserMessageCount>;
}

@Injectable({
    providedIn: 'root'
})
export class CampaignsApiService implements ICampaignsApiService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(CAMPAIGNS_API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Gets the list of available campaign types.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @return OK
     */
    getCampaignTypes(page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined): Observable<CampaignTypeResultSet> {
        let url_ = this.baseUrl + "/api/campaign-types?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (size === null)
            throw new Error("The parameter 'size' cannot be null.");
        else if (size !== undefined)
            url_ += "Size=" + encodeURIComponent("" + size) + "&";
        if (sort === null)
            throw new Error("The parameter 'sort' cannot be null.");
        else if (sort !== undefined)
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCampaignTypes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCampaignTypes(<any>response_);
                } catch (e) {
                    return <Observable<CampaignTypeResultSet>><any>_observableThrow(e);
                }
            } else
                return <Observable<CampaignTypeResultSet>><any>_observableThrow(response_);
        }));
    }

    protected processGetCampaignTypes(response: HttpResponseBase): Observable<CampaignTypeResultSet> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignTypeResultSet.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CampaignTypeResultSet>(<any>null);
    }

    /**
     * Creates a new campaign type.
     * @param body (optional) Contains info about the campaign type to be created.
     * @return OK
     */
    createCampaignType(body?: UpsertCampaignTypeRequest | undefined): Observable<CampaignType> {
        let url_ = this.baseUrl + "/api/campaign-types";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateCampaignType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateCampaignType(<any>response_);
                } catch (e) {
                    return <Observable<CampaignType>><any>_observableThrow(e);
                }
            } else
                return <Observable<CampaignType>><any>_observableThrow(response_);
        }));
    }

    protected processCreateCampaignType(response: HttpResponseBase): Observable<CampaignType> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignType.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CampaignType>(<any>null);
    }

    /**
     * Updates an existing campaign type.
     * @param campaignTypeId The id of the campaign type.
     * @param body (optional) Contains info about the campaign type to update.
     * @return No Content
     */
    updateCampaignType(campaignTypeId: string, body?: UpsertCampaignTypeRequest | undefined): Observable<CampaignType> {
        let url_ = this.baseUrl + "/api/campaign-types/{campaignTypeId}";
        if (campaignTypeId === undefined || campaignTypeId === null)
            throw new Error("The parameter 'campaignTypeId' must be defined.");
        url_ = url_.replace("{campaignTypeId}", encodeURIComponent("" + campaignTypeId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateCampaignType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateCampaignType(<any>response_);
                } catch (e) {
                    return <Observable<CampaignType>><any>_observableThrow(e);
                }
            } else
                return <Observable<CampaignType>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateCampaignType(response: HttpResponseBase): Observable<CampaignType> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result204: any = null;
            let resultData204 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result204 = CampaignType.fromJS(resultData204);
            return _observableOf(result204);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CampaignType>(<any>null);
    }

    /**
     * Permanently deletes a campaign type.
     * @param campaignTypeId The id of the campaign type.
     * @return No Content
     */
    deleteCampaignType(campaignTypeId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/campaign-types/{campaignTypeId}";
        if (campaignTypeId === undefined || campaignTypeId === null)
            throw new Error("The parameter 'campaignTypeId' must be defined.");
        url_ = url_.replace("{campaignTypeId}", encodeURIComponent("" + campaignTypeId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteCampaignType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteCampaignType(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteCampaignType(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Gets the list of all campaigns using the provided Indice.Types.ListOptions.
     * @param filter_DeliveryChannel (optional) The delivery channel of a campaign.
     * @param filter_Published (optional) Determines if a campaign is published.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @return OK
     */
    getCampaigns(filter_DeliveryChannel?: CampaignDeliveryChannel | undefined, filter_Published?: boolean | undefined, page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined): Observable<CampaignResultSet> {
        let url_ = this.baseUrl + "/api/campaigns?";
        if (filter_DeliveryChannel === null)
            throw new Error("The parameter 'filter_DeliveryChannel' cannot be null.");
        else if (filter_DeliveryChannel !== undefined)
            url_ += "Filter.DeliveryChannel=" + encodeURIComponent("" + filter_DeliveryChannel) + "&";
        if (filter_Published === null)
            throw new Error("The parameter 'filter_Published' cannot be null.");
        else if (filter_Published !== undefined)
            url_ += "Filter.Published=" + encodeURIComponent("" + filter_Published) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (size === null)
            throw new Error("The parameter 'size' cannot be null.");
        else if (size !== undefined)
            url_ += "Size=" + encodeURIComponent("" + size) + "&";
        if (sort === null)
            throw new Error("The parameter 'sort' cannot be null.");
        else if (sort !== undefined)
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCampaigns(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCampaigns(<any>response_);
                } catch (e) {
                    return <Observable<CampaignResultSet>><any>_observableThrow(e);
                }
            } else
                return <Observable<CampaignResultSet>><any>_observableThrow(response_);
        }));
    }

    protected processGetCampaigns(response: HttpResponseBase): Observable<CampaignResultSet> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignResultSet.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CampaignResultSet>(<any>null);
    }

    /**
     * Creates a new campaign.
     * @param body (optional) Contains info about the campaign to be created.
     * @return Created
     */
    createCampaign(body?: CreateCampaignRequest | undefined): Observable<Campaign> {
        let url_ = this.baseUrl + "/api/campaigns";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateCampaign(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateCampaign(<any>response_);
                } catch (e) {
                    return <Observable<Campaign>><any>_observableThrow(e);
                }
            } else
                return <Observable<Campaign>><any>_observableThrow(response_);
        }));
    }

    protected processCreateCampaign(response: HttpResponseBase): Observable<Campaign> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = Campaign.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Campaign>(<any>null);
    }

    /**
     * Gets a campaign with the specified id.
     * @param campaignId The id of the campaign.
     * @return OK
     */
    getCampaignById(campaignId: string): Observable<CampaignDetails> {
        let url_ = this.baseUrl + "/api/campaigns/{campaignId}";
        if (campaignId === undefined || campaignId === null)
            throw new Error("The parameter 'campaignId' must be defined.");
        url_ = url_.replace("{campaignId}", encodeURIComponent("" + campaignId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCampaignById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCampaignById(<any>response_);
                } catch (e) {
                    return <Observable<CampaignDetails>><any>_observableThrow(e);
                }
            } else
                return <Observable<CampaignDetails>><any>_observableThrow(response_);
        }));
    }

    protected processGetCampaignById(response: HttpResponseBase): Observable<CampaignDetails> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignDetails.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CampaignDetails>(<any>null);
    }

    /**
     * Updates an existing campaign.
     * @param campaignId The id of the campaign to update.
     * @param body (optional) Contains info about the campaign to update.
     * @return No Content
     */
    updateCampaign(campaignId: string, body?: UpdateCampaignRequest | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/campaigns/{campaignId}";
        if (campaignId === undefined || campaignId === null)
            throw new Error("The parameter 'campaignId' must be defined.");
        url_ = url_.replace("{campaignId}", encodeURIComponent("" + campaignId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateCampaign(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateCampaign(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateCampaign(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Permanently deletes a campaign.
     * @param campaignId The id of the campaign.
     * @return No Content
     */
    deleteCampaign(campaignId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/campaigns/{campaignId}";
        if (campaignId === undefined || campaignId === null)
            throw new Error("The parameter 'campaignId' must be defined.");
        url_ = url_.replace("{campaignId}", encodeURIComponent("" + campaignId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteCampaign(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteCampaign(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteCampaign(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Uploads an attachment for the specified campaign.
     * @param campaignId The id of the campaign.
     * @param file (optional) 
     * @return OK
     */
    uploadCampaignAttachment(campaignId: string, file?: FileParameter | undefined): Observable<AttachmentLink> {
        let url_ = this.baseUrl + "/api/campaigns/{campaignId}/attachment";
        if (campaignId === undefined || campaignId === null)
            throw new Error("The parameter 'campaignId' must be defined.");
        url_ = url_.replace("{campaignId}", encodeURIComponent("" + campaignId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file === null || file === undefined)
            throw new Error("The parameter 'file' cannot be null.");
        else
            content_.append("file", file.data, file.fileName ? file.fileName : "file");

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUploadCampaignAttachment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUploadCampaignAttachment(<any>response_);
                } catch (e) {
                    return <Observable<AttachmentLink>><any>_observableThrow(e);
                }
            } else
                return <Observable<AttachmentLink>><any>_observableThrow(response_);
        }));
    }

    protected processUploadCampaignAttachment(response: HttpResponseBase): Observable<AttachmentLink> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AttachmentLink.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AttachmentLink>(<any>null);
    }

    /**
     * Gets the statistics for a specified campaign.
     * @param campaignId The id of the campaign.
     * @return OK
     */
    getCampaignStatistics(campaignId: string): Observable<CampaignStatistics> {
        let url_ = this.baseUrl + "/api/campaigns/{campaignId}/statistics";
        if (campaignId === undefined || campaignId === null)
            throw new Error("The parameter 'campaignId' must be defined.");
        url_ = url_.replace("{campaignId}", encodeURIComponent("" + campaignId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCampaignStatistics(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCampaignStatistics(<any>response_);
                } catch (e) {
                    return <Observable<CampaignStatistics>><any>_observableThrow(e);
                }
            } else
                return <Observable<CampaignStatistics>><any>_observableThrow(response_);
        }));
    }

    protected processGetCampaignStatistics(response: HttpResponseBase): Observable<CampaignStatistics> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignStatistics.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CampaignStatistics>(<any>null);
    }

    /**
     * Gets the statistics for a specified campaign in the form of an Excel file.
     * @param campaignId The id of the campaign.
     * @return OK
     */
    exportCampaignStatistics(campaignId: string): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/campaigns/{campaignId}/statistics/export";
        if (campaignId === undefined || campaignId === null)
            throw new Error("The parameter 'campaignId' must be defined.");
        url_ = url_.replace("{campaignId}", encodeURIComponent("" + campaignId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportCampaignStatistics(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportCampaignStatistics(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processExportCampaignStatistics(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    /**
     * Gets the attachment associated with a campaign.
     * @param fileGuid Contains the photo's Id.
     * @param format Contains the format of the uploaded attachment extension.
     * @return OK
     */
    getCampaignAttachment(fileGuid: string, format: string): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/campaigns/attachments/{fileGuid}.{format}";
        if (fileGuid === undefined || fileGuid === null)
            throw new Error("The parameter 'fileGuid' must be defined.");
        url_ = url_.replace("{fileGuid}", encodeURIComponent("" + fileGuid));
        if (format === undefined || format === null)
            throw new Error("The parameter 'format' must be defined.");
        url_ = url_.replace("{format}", encodeURIComponent("" + format));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCampaignAttachment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCampaignAttachment(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetCampaignAttachment(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    /**
     * Gets the list of all user messages using the provided Indice.Types.ListOptions.
     * @param filter_TypeId (optional) The id of a campaign type.
     * @param filter_ActiveFrom (optional) Active from.
     * @param filter_ActiveTo (optional) Active to.
     * @param filter_ShowExpired (optional) Controls whether to show expired messages (that is outside of active period). Defaults to false.
     * @param page (optional) 
     * @param size (optional) 
     * @param sort (optional) 
     * @param search (optional) 
     * @return OK
     */
    getMessages(filter_TypeId?: string | undefined, filter_ActiveFrom?: Date | undefined, filter_ActiveTo?: Date | undefined, filter_ShowExpired?: boolean | undefined, page?: number | undefined, size?: number | undefined, sort?: string | undefined, search?: string | undefined): Observable<UserMessageCampaignTypeIEnumerableResultSet> {
        let url_ = this.baseUrl + "/api/my/messages?";
        if (filter_TypeId === null)
            throw new Error("The parameter 'filter_TypeId' cannot be null.");
        else if (filter_TypeId !== undefined)
            url_ += "Filter.TypeId=" + encodeURIComponent("" + filter_TypeId) + "&";
        if (filter_ActiveFrom === null)
            throw new Error("The parameter 'filter_ActiveFrom' cannot be null.");
        else if (filter_ActiveFrom !== undefined)
            url_ += "Filter.ActiveFrom=" + encodeURIComponent(filter_ActiveFrom ? "" + filter_ActiveFrom.toJSON() : "") + "&";
        if (filter_ActiveTo === null)
            throw new Error("The parameter 'filter_ActiveTo' cannot be null.");
        else if (filter_ActiveTo !== undefined)
            url_ += "Filter.ActiveTo=" + encodeURIComponent(filter_ActiveTo ? "" + filter_ActiveTo.toJSON() : "") + "&";
        if (filter_ShowExpired === null)
            throw new Error("The parameter 'filter_ShowExpired' cannot be null.");
        else if (filter_ShowExpired !== undefined)
            url_ += "Filter.ShowExpired=" + encodeURIComponent("" + filter_ShowExpired) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (size === null)
            throw new Error("The parameter 'size' cannot be null.");
        else if (size !== undefined)
            url_ += "Size=" + encodeURIComponent("" + size) + "&";
        if (sort === null)
            throw new Error("The parameter 'sort' cannot be null.");
        else if (sort !== undefined)
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMessages(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMessages(<any>response_);
                } catch (e) {
                    return <Observable<UserMessageCampaignTypeIEnumerableResultSet>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserMessageCampaignTypeIEnumerableResultSet>><any>_observableThrow(response_);
        }));
    }

    protected processGetMessages(response: HttpResponseBase): Observable<UserMessageCampaignTypeIEnumerableResultSet> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserMessageCampaignTypeIEnumerableResultSet.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserMessageCampaignTypeIEnumerableResultSet>(<any>null);
    }

    /**
     * Gets the message with the specified id.
     * @param messageId The id of the message.
     * @return OK
     */
    getMessageById(messageId: string): Observable<UserMessage> {
        let url_ = this.baseUrl + "/api/my/messages/{messageId}";
        if (messageId === undefined || messageId === null)
            throw new Error("The parameter 'messageId' must be defined.");
        url_ = url_.replace("{messageId}", encodeURIComponent("" + messageId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMessageById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMessageById(<any>response_);
                } catch (e) {
                    return <Observable<UserMessage>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserMessage>><any>_observableThrow(response_);
        }));
    }

    protected processGetMessageById(response: HttpResponseBase): Observable<UserMessage> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserMessage.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserMessage>(<any>null);
    }

    /**
     * Marks the specified message as deleted.
     * @param messageId The id of the message.
     * @return No Content
     */
    deleteMessage(messageId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/my/messages/{messageId}";
        if (messageId === undefined || messageId === null)
            throw new Error("The parameter 'messageId' must be defined.");
        url_ = url_.replace("{messageId}", encodeURIComponent("" + messageId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteMessage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteMessage(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteMessage(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Marks the specified message as read.
     * @param messageId The id of the message.
     * @return No Content
     */
    markMessageAsRead(messageId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/my/messages/{messageId}/read";
        if (messageId === undefined || messageId === null)
            throw new Error("The parameter 'messageId' must be defined.");
        url_ = url_.replace("{messageId}", encodeURIComponent("" + messageId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processMarkMessageAsRead(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMarkMessageAsRead(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processMarkMessageAsRead(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Returns the number of messages that have not been read by the user.
     * @return OK
     */
    getNumberOfUnreadMessages(): Observable<UserMessageCount> {
        let url_ = this.baseUrl + "/api/my/messages/unread-count";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetNumberOfUnreadMessages(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetNumberOfUnreadMessages(<any>response_);
                } catch (e) {
                    return <Observable<UserMessageCount>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserMessageCount>><any>_observableThrow(response_);
        }));
    }

    protected processGetNumberOfUnreadMessages(response: HttpResponseBase): Observable<UserMessageCount> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserMessageCount.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserMessageCount>(<any>null);
    }
}

/** Models an attachment that is associated with a campaign. */
export class AttachmentLink implements IAttachmentLink {
    /** The id of the attachment. */
    id?: string;
    /** The unique file identifier. */
    fileGuid?: string;
    /** The URL to the file. */
    permaLink?: string | undefined;
    /** The label of the file. */
    label?: string | undefined;
    /** The file size in bytes. */
    size?: number;
    /** The file size in readable format. */
    readonly sizeText?: string | undefined;
    /** The content type of the file. */
    contentType?: string | undefined;

    constructor(data?: IAttachmentLink) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.fileGuid = _data["fileGuid"];
            this.permaLink = _data["permaLink"];
            this.label = _data["label"];
            this.size = _data["size"];
            (<any>this).sizeText = _data["sizeText"];
            this.contentType = _data["contentType"];
        }
    }

    static fromJS(data: any): AttachmentLink {
        data = typeof data === 'object' ? data : {};
        let result = new AttachmentLink();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["fileGuid"] = this.fileGuid;
        data["permaLink"] = this.permaLink;
        data["label"] = this.label;
        data["size"] = this.size;
        data["sizeText"] = this.sizeText;
        data["contentType"] = this.contentType;
        return data;
    }
}

/** Models an attachment that is associated with a campaign. */
export interface IAttachmentLink {
    /** The id of the attachment. */
    id?: string;
    /** The unique file identifier. */
    fileGuid?: string;
    /** The URL to the file. */
    permaLink?: string | undefined;
    /** The label of the file. */
    label?: string | undefined;
    /** The file size in bytes. */
    size?: number;
    /** The file size in readable format. */
    sizeText?: string | undefined;
    /** The content type of the file. */
    contentType?: string | undefined;
}

/** Models a campaign. */
export class Campaign implements ICampaign {
    /** The unique identifier of the campaign. */
    id?: string;
    /** The title of the campaign. */
    title?: string | undefined;
    /** The content of the campaign. */
    content?: string | undefined;
    /** Defines a CTA (click-to-action) text. */
    actionText?: string | undefined;
    /** Defines a CTA (click-to-action) URL. */
    actionUrl?: string | undefined;
    /** Specifies when a campaign was created. */
    createdAt?: Date;
    /** Determines if a campaign is published. */
    published?: boolean;
    activePeriod?: Period;
    /** Determines if campaign targets all user base. */
    isGlobal?: boolean;
    type?: CampaignType;
    deliveryChannel?: CampaignDeliveryChannel;
    /** Optional data for the campaign. */
    data?: { [key: string]: any; } | undefined;

    constructor(data?: ICampaign) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.content = _data["content"];
            this.actionText = _data["actionText"];
            this.actionUrl = _data["actionUrl"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.published = _data["published"];
            this.activePeriod = _data["activePeriod"] ? Period.fromJS(_data["activePeriod"]) : <any>undefined;
            this.isGlobal = _data["isGlobal"];
            this.type = _data["type"] ? CampaignType.fromJS(_data["type"]) : <any>undefined;
            this.deliveryChannel = _data["deliveryChannel"];
            if (_data["data"]) {
                this.data = {} as any;
                for (let key in _data["data"]) {
                    if (_data["data"].hasOwnProperty(key))
                        (<any>this.data)![key] = _data["data"][key];
                }
            }
        }
    }

    static fromJS(data: any): Campaign {
        data = typeof data === 'object' ? data : {};
        let result = new Campaign();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["content"] = this.content;
        data["actionText"] = this.actionText;
        data["actionUrl"] = this.actionUrl;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["published"] = this.published;
        data["activePeriod"] = this.activePeriod ? this.activePeriod.toJSON() : <any>undefined;
        data["isGlobal"] = this.isGlobal;
        data["type"] = this.type ? this.type.toJSON() : <any>undefined;
        data["deliveryChannel"] = this.deliveryChannel;
        if (this.data) {
            data["data"] = {};
            for (let key in this.data) {
                if (this.data.hasOwnProperty(key))
                    (<any>data["data"])[key] = this.data[key];
            }
        }
        return data;
    }
}

/** Models a campaign. */
export interface ICampaign {
    /** The unique identifier of the campaign. */
    id?: string;
    /** The title of the campaign. */
    title?: string | undefined;
    /** The content of the campaign. */
    content?: string | undefined;
    /** Defines a CTA (click-to-action) text. */
    actionText?: string | undefined;
    /** Defines a CTA (click-to-action) URL. */
    actionUrl?: string | undefined;
    /** Specifies when a campaign was created. */
    createdAt?: Date;
    /** Determines if a campaign is published. */
    published?: boolean;
    activePeriod?: Period;
    /** Determines if campaign targets all user base. */
    isGlobal?: boolean;
    type?: CampaignType;
    deliveryChannel?: CampaignDeliveryChannel;
    /** Optional data for the campaign. */
    data?: { [key: string]: any; } | undefined;
}

/** The delivery channel of a campaign. */
export enum CampaignDeliveryChannel {
    None = "None",
    Inbox = "Inbox",
    PushNotification = "PushNotification",
    Email = "Email",
    SMS = "SMS",
}

/** Models a campaign. */
export class CampaignDetails implements ICampaignDetails {
    /** The unique identifier of the campaign. */
    id?: string;
    /** The title of the campaign. */
    title?: string | undefined;
    /** The content of the campaign. */
    content?: string | undefined;
    /** Defines a CTA (click-to-action) text. */
    actionText?: string | undefined;
    /** Defines a CTA (click-to-action) URL. */
    actionUrl?: string | undefined;
    /** Specifies when a campaign was created. */
    createdAt?: Date;
    /** Determines if a campaign is published. */
    published?: boolean;
    activePeriod?: Period;
    /** Determines if campaign targets all user base. */
    isGlobal?: boolean;
    type?: CampaignType;
    deliveryChannel?: CampaignDeliveryChannel;
    /** Optional data for the campaign. */
    data?: { [key: string]: any; } | undefined;
    attachment?: AttachmentLink;

    constructor(data?: ICampaignDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.content = _data["content"];
            this.actionText = _data["actionText"];
            this.actionUrl = _data["actionUrl"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.published = _data["published"];
            this.activePeriod = _data["activePeriod"] ? Period.fromJS(_data["activePeriod"]) : <any>undefined;
            this.isGlobal = _data["isGlobal"];
            this.type = _data["type"] ? CampaignType.fromJS(_data["type"]) : <any>undefined;
            this.deliveryChannel = _data["deliveryChannel"];
            if (_data["data"]) {
                this.data = {} as any;
                for (let key in _data["data"]) {
                    if (_data["data"].hasOwnProperty(key))
                        (<any>this.data)![key] = _data["data"][key];
                }
            }
            this.attachment = _data["attachment"] ? AttachmentLink.fromJS(_data["attachment"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CampaignDetails {
        data = typeof data === 'object' ? data : {};
        let result = new CampaignDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["content"] = this.content;
        data["actionText"] = this.actionText;
        data["actionUrl"] = this.actionUrl;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["published"] = this.published;
        data["activePeriod"] = this.activePeriod ? this.activePeriod.toJSON() : <any>undefined;
        data["isGlobal"] = this.isGlobal;
        data["type"] = this.type ? this.type.toJSON() : <any>undefined;
        data["deliveryChannel"] = this.deliveryChannel;
        if (this.data) {
            data["data"] = {};
            for (let key in this.data) {
                if (this.data.hasOwnProperty(key))
                    (<any>data["data"])[key] = this.data[key];
            }
        }
        data["attachment"] = this.attachment ? this.attachment.toJSON() : <any>undefined;
        return data;
    }
}

/** Models a campaign. */
export interface ICampaignDetails {
    /** The unique identifier of the campaign. */
    id?: string;
    /** The title of the campaign. */
    title?: string | undefined;
    /** The content of the campaign. */
    content?: string | undefined;
    /** Defines a CTA (click-to-action) text. */
    actionText?: string | undefined;
    /** Defines a CTA (click-to-action) URL. */
    actionUrl?: string | undefined;
    /** Specifies when a campaign was created. */
    createdAt?: Date;
    /** Determines if a campaign is published. */
    published?: boolean;
    activePeriod?: Period;
    /** Determines if campaign targets all user base. */
    isGlobal?: boolean;
    type?: CampaignType;
    deliveryChannel?: CampaignDeliveryChannel;
    /** Optional data for the campaign. */
    data?: { [key: string]: any; } | undefined;
    attachment?: AttachmentLink;
}

export class CampaignResultSet implements ICampaignResultSet {
    count?: number;
    items?: Campaign[] | undefined;

    constructor(data?: ICampaignResultSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(Campaign.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CampaignResultSet {
        data = typeof data === 'object' ? data : {};
        let result = new CampaignResultSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICampaignResultSet {
    count?: number;
    items?: Campaign[] | undefined;
}

export class CampaignStatistics implements ICampaignStatistics {
    title?: string | undefined;
    readCount?: number;
    notReadCount?: number | undefined;
    deletedCount?: number;
    clickToActionCount?: number;
    lastUpdated?: Date;

    constructor(data?: ICampaignStatistics) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.readCount = _data["readCount"];
            this.notReadCount = _data["notReadCount"];
            this.deletedCount = _data["deletedCount"];
            this.clickToActionCount = _data["clickToActionCount"];
            this.lastUpdated = _data["lastUpdated"] ? new Date(_data["lastUpdated"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CampaignStatistics {
        data = typeof data === 'object' ? data : {};
        let result = new CampaignStatistics();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["readCount"] = this.readCount;
        data["notReadCount"] = this.notReadCount;
        data["deletedCount"] = this.deletedCount;
        data["clickToActionCount"] = this.clickToActionCount;
        data["lastUpdated"] = this.lastUpdated ? this.lastUpdated.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICampaignStatistics {
    title?: string | undefined;
    readCount?: number;
    notReadCount?: number | undefined;
    deletedCount?: number;
    clickToActionCount?: number;
    lastUpdated?: Date;
}

/** Models a campaign type. */
export class CampaignType implements ICampaignType {
    /** The id of a campaign type. */
    id?: string;
    /** The name of a campaign type. */
    name?: string | undefined;

    constructor(data?: ICampaignType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CampaignType {
        data = typeof data === 'object' ? data : {};
        let result = new CampaignType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

/** Models a campaign type. */
export interface ICampaignType {
    /** The id of a campaign type. */
    id?: string;
    /** The name of a campaign type. */
    name?: string | undefined;
}

export class CampaignTypeResultSet implements ICampaignTypeResultSet {
    count?: number;
    items?: CampaignType[] | undefined;

    constructor(data?: ICampaignTypeResultSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CampaignType.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CampaignTypeResultSet {
        data = typeof data === 'object' ? data : {};
        let result = new CampaignTypeResultSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICampaignTypeResultSet {
    count?: number;
    items?: CampaignType[] | undefined;
}

/** The request model used to create a new campaign. */
export class CreateCampaignRequest implements ICreateCampaignRequest {
    /** The title of the campaign. */
    title!: string | undefined;
    /** The content of the campaign. */
    content!: string | undefined;
    /** Defines a CTA (click-to-action) text. */
    actionText?: string | undefined;
    /** Determines if a campaign is published. */
    published?: boolean;
    activePeriod?: Period;
    /** The id of the type this campaign belongs. */
    typeId?: string | undefined;
    /** Optional data for the campaign. */
    data?: { [key: string]: any; } | undefined;
    /** Determines if campaign targets all user base. */
    isGlobal?: boolean;
    /** Defines a list of user identifiers that constitutes the audience of the campaign. */
    selectedUserCodes?: string[] | undefined;
    /** Defines a CTA (click-to-action) URL. */
    actionUrl?: string | undefined;
    deliveryChannel?: CampaignDeliveryChannel;

    constructor(data?: ICreateCampaignRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.content = _data["content"];
            this.actionText = _data["actionText"];
            this.published = _data["published"];
            this.activePeriod = _data["activePeriod"] ? Period.fromJS(_data["activePeriod"]) : <any>undefined;
            this.typeId = _data["typeId"];
            if (_data["data"]) {
                this.data = {} as any;
                for (let key in _data["data"]) {
                    if (_data["data"].hasOwnProperty(key))
                        (<any>this.data)![key] = _data["data"][key];
                }
            }
            this.isGlobal = _data["isGlobal"];
            if (Array.isArray(_data["selectedUserCodes"])) {
                this.selectedUserCodes = [] as any;
                for (let item of _data["selectedUserCodes"])
                    this.selectedUserCodes!.push(item);
            }
            this.actionUrl = _data["actionUrl"];
            this.deliveryChannel = _data["deliveryChannel"];
        }
    }

    static fromJS(data: any): CreateCampaignRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCampaignRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["content"] = this.content;
        data["actionText"] = this.actionText;
        data["published"] = this.published;
        data["activePeriod"] = this.activePeriod ? this.activePeriod.toJSON() : <any>undefined;
        data["typeId"] = this.typeId;
        if (this.data) {
            data["data"] = {};
            for (let key in this.data) {
                if (this.data.hasOwnProperty(key))
                    (<any>data["data"])[key] = this.data[key];
            }
        }
        data["isGlobal"] = this.isGlobal;
        if (Array.isArray(this.selectedUserCodes)) {
            data["selectedUserCodes"] = [];
            for (let item of this.selectedUserCodes)
                data["selectedUserCodes"].push(item);
        }
        data["actionUrl"] = this.actionUrl;
        data["deliveryChannel"] = this.deliveryChannel;
        return data;
    }
}

/** The request model used to create a new campaign. */
export interface ICreateCampaignRequest {
    /** The title of the campaign. */
    title: string | undefined;
    /** The content of the campaign. */
    content: string | undefined;
    /** Defines a CTA (click-to-action) text. */
    actionText?: string | undefined;
    /** Determines if a campaign is published. */
    published?: boolean;
    activePeriod?: Period;
    /** The id of the type this campaign belongs. */
    typeId?: string | undefined;
    /** Optional data for the campaign. */
    data?: { [key: string]: any; } | undefined;
    /** Determines if campaign targets all user base. */
    isGlobal?: boolean;
    /** Defines a list of user identifiers that constitutes the audience of the campaign. */
    selectedUserCodes?: string[] | undefined;
    /** Defines a CTA (click-to-action) URL. */
    actionUrl?: string | undefined;
    deliveryChannel?: CampaignDeliveryChannel;
}

export class Period implements IPeriod {
    from?: Date | undefined;
    to?: Date | undefined;

    constructor(data?: IPeriod) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.from = _data["from"] ? new Date(_data["from"].toString()) : <any>undefined;
            this.to = _data["to"] ? new Date(_data["to"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Period {
        data = typeof data === 'object' ? data : {};
        let result = new Period();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["from"] = this.from ? this.from.toISOString() : <any>undefined;
        data["to"] = this.to ? this.to.toISOString() : <any>undefined;
        return data;
    }
}

export interface IPeriod {
    from?: Date | undefined;
    to?: Date | undefined;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
}

/** The request model used to update an existing campaign. */
export class UpdateCampaignRequest implements IUpdateCampaignRequest {
    /** The title of the campaign. */
    title?: string | undefined;
    /** The content of the campaign. */
    content?: string | undefined;
    /** Defines a CTA (click-to-action) text. */
    actionText?: string | undefined;
    /** Determines if a campaign is published. */
    published?: boolean;
    activePeriod?: Period;
    /** The id of the type this campaign belongs. */
    typeId?: string | undefined;
    /** Optional data for the campaign. */
    data?: { [key: string]: any; } | undefined;

    constructor(data?: IUpdateCampaignRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.content = _data["content"];
            this.actionText = _data["actionText"];
            this.published = _data["published"];
            this.activePeriod = _data["activePeriod"] ? Period.fromJS(_data["activePeriod"]) : <any>undefined;
            this.typeId = _data["typeId"];
            if (_data["data"]) {
                this.data = {} as any;
                for (let key in _data["data"]) {
                    if (_data["data"].hasOwnProperty(key))
                        (<any>this.data)![key] = _data["data"][key];
                }
            }
        }
    }

    static fromJS(data: any): UpdateCampaignRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCampaignRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["content"] = this.content;
        data["actionText"] = this.actionText;
        data["published"] = this.published;
        data["activePeriod"] = this.activePeriod ? this.activePeriod.toJSON() : <any>undefined;
        data["typeId"] = this.typeId;
        if (this.data) {
            data["data"] = {};
            for (let key in this.data) {
                if (this.data.hasOwnProperty(key))
                    (<any>data["data"])[key] = this.data[key];
            }
        }
        return data;
    }
}

/** The request model used to update an existing campaign. */
export interface IUpdateCampaignRequest {
    /** The title of the campaign. */
    title?: string | undefined;
    /** The content of the campaign. */
    content?: string | undefined;
    /** Defines a CTA (click-to-action) text. */
    actionText?: string | undefined;
    /** Determines if a campaign is published. */
    published?: boolean;
    activePeriod?: Period;
    /** The id of the type this campaign belongs. */
    typeId?: string | undefined;
    /** Optional data for the campaign. */
    data?: { [key: string]: any; } | undefined;
}

/** The request model used to create a new campaign type. */
export class UpsertCampaignTypeRequest implements IUpsertCampaignTypeRequest {
    /** The name of a campaign type. */
    name!: string | undefined;

    constructor(data?: IUpsertCampaignTypeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): UpsertCampaignTypeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpsertCampaignTypeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

/** The request model used to create a new campaign type. */
export interface IUpsertCampaignTypeRequest {
    /** The name of a campaign type. */
    name: string | undefined;
}

/** Models a user message. */
export class UserMessage implements IUserMessage {
    /** The unique identifier of the user message. */
    id?: string;
    /** The title of the user message. */
    title?: string | undefined;
    /** The content of the user message. */
    content?: string | undefined;
    /** Determines if a message is read by the user. */
    isRead?: boolean;
    /** Defines a CTA (click-to-action) text. */
    actionText?: string | undefined;
    /** Defines a CTA (click-to-action) URL. */
    actionUrl?: string | undefined;
    /** The URL to the attachment. */
    attachmentUrl?: string | undefined;
    /** Defines when the message was created. */
    createdAt?: Date;
    activePeriod?: Period;
    type?: CampaignType;

    constructor(data?: IUserMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.content = _data["content"];
            this.isRead = _data["isRead"];
            this.actionText = _data["actionText"];
            this.actionUrl = _data["actionUrl"];
            this.attachmentUrl = _data["attachmentUrl"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.activePeriod = _data["activePeriod"] ? Period.fromJS(_data["activePeriod"]) : <any>undefined;
            this.type = _data["type"] ? CampaignType.fromJS(_data["type"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserMessage {
        data = typeof data === 'object' ? data : {};
        let result = new UserMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["content"] = this.content;
        data["isRead"] = this.isRead;
        data["actionText"] = this.actionText;
        data["actionUrl"] = this.actionUrl;
        data["attachmentUrl"] = this.attachmentUrl;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["activePeriod"] = this.activePeriod ? this.activePeriod.toJSON() : <any>undefined;
        data["type"] = this.type ? this.type.toJSON() : <any>undefined;
        return data;
    }
}

/** Models a user message. */
export interface IUserMessage {
    /** The unique identifier of the user message. */
    id?: string;
    /** The title of the user message. */
    title?: string | undefined;
    /** The content of the user message. */
    content?: string | undefined;
    /** Determines if a message is read by the user. */
    isRead?: boolean;
    /** Defines a CTA (click-to-action) text. */
    actionText?: string | undefined;
    /** Defines a CTA (click-to-action) URL. */
    actionUrl?: string | undefined;
    /** The URL to the attachment. */
    attachmentUrl?: string | undefined;
    /** Defines when the message was created. */
    createdAt?: Date;
    activePeriod?: Period;
    type?: CampaignType;
}

export class UserMessageCampaignTypeIEnumerableResultSet implements IUserMessageCampaignTypeIEnumerableResultSet {
    count?: number;
    items?: UserMessage[] | undefined;
    summary?: CampaignType[] | undefined;

    constructor(data?: IUserMessageCampaignTypeIEnumerableResultSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(UserMessage.fromJS(item));
            }
            if (Array.isArray(_data["summary"])) {
                this.summary = [] as any;
                for (let item of _data["summary"])
                    this.summary!.push(CampaignType.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserMessageCampaignTypeIEnumerableResultSet {
        data = typeof data === 'object' ? data : {};
        let result = new UserMessageCampaignTypeIEnumerableResultSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        if (Array.isArray(this.summary)) {
            data["summary"] = [];
            for (let item of this.summary)
                data["summary"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUserMessageCampaignTypeIEnumerableResultSet {
    count?: number;
    items?: UserMessage[] | undefined;
    summary?: CampaignType[] | undefined;
}

/** Models the total count of user messages */
export class UserMessageCount implements IUserMessageCount {
    /** The total count of user messages. */
    count?: number;

    constructor(data?: IUserMessageCount) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): UserMessageCount {
        data = typeof data === 'object' ? data : {};
        let result = new UserMessageCount();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        return data;
    }
}

/** Models the total count of user messages */
export interface IUserMessageCount {
    /** The total count of user messages. */
    count?: number;
}

export class ValidationProblemDetails implements IValidationProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
    errors?: { [key: string]: string[]; } | undefined;

    constructor(data?: IValidationProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
            if (_data["errors"]) {
                this.errors = {} as any;
                for (let key in _data["errors"]) {
                    if (_data["errors"].hasOwnProperty(key))
                        (<any>this.errors)![key] = _data["errors"][key] !== undefined ? _data["errors"][key] : [];
                }
            }
        }
    }

    static fromJS(data: any): ValidationProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        if (this.errors) {
            data["errors"] = {};
            for (let key in this.errors) {
                if (this.errors.hasOwnProperty(key))
                    (<any>data["errors"])[key] = this.errors[key];
            }
        }
        return data;
    }
}

export interface IValidationProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
    errors?: { [key: string]: string[]; } | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}