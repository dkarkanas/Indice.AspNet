@model PublicKeyCredentialCreationOptionsBase64

<h2>Please use your authenticator</h2>
<script type="text/javascript">
    // Challenge
    let challengeBytesAsString = atob('@Html.Raw(Model.ChallengeBase64)');
    let challenge = new Uint8Array(challengeBytesAsString.length);
    for (let i = 0; i < challengeBytesAsString.length; i++) {
        challenge[i] = challengeBytesAsString.charCodeAt(i);
    }
    // Supported algorithms, ordered by preference.
    // https://www.iana.org/assignments/cose/cose.xhtml#algorithms
    const pubKeyCredParams = [{
        type: 'public-key',
        alg: -7
    }, {
        type: 'public-key',
        alg: -257
    }, {
        type: 'public-key',
        alg: -37
    }, {
        type: 'public-key',
        alg: -35
    }, {
        type: 'public-key',
        alg: -258
    }, {
        type: 'public-key',
        alg: -38
    }, {
        type: 'public-key',
        alg: -36
    }, {
        type: 'public-key',
        alg: -259
    }, {
        type: 'public-key',
        alg: -39
    }, {
        type: 'public-key',
        alg: -8
    }, {
        type: 'public-key',
        alg: -7
    }, {
        type: 'public-key',
        alg: -65535
    }];
    let rp = {
        id: '@Model.RelyingParty.Id',
        name: '@Model.RelyingParty.Name'
    };
    // User handle.
    let userHandleBytesAsString = atob('@Html.Raw(Model.UserHandleBase64)');
    let userHandle = new Uint8Array(userHandleBytesAsString.length);
    for (let i = 0; i < userHandleBytesAsString.length; i++) {
        userHandle[i] = userHandleBytesAsString.charCodeAt(i);
    }
    let user = {
        name: '@Model.UserId',
        displayName: '@Model.UserId',
        id: userHandle
    };
    debugger;
    // https://developer.mozilla.org/en-US/docs/Web/API/CredentialsContainer/create
    navigator.credentials.create({
        // https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialCreationOptions
        publicKey: {
            challenge,
            rp,
            user,
            pubKeyCredParams,
            authenticatorSelection: {
                requireResidentKey: false,
                userVerification: 'preferred'
            },
            attestation: 'none'
        }
    })
    .then((credentials) => {
        debugger;
        let encodedCredentials = {
            id: credentials.id,
            rawId: btoa(String.fromCharCode.apply(null, new Uint8Array(credentials.rawId))),
            type: credentials.type,
            response: {
                attestationObject: btoa(String.fromCharCode.apply(null, new Uint8Array(credentials.response.attestationObject))),
                clientDataJSON: btoa(String.fromCharCode.apply(null, new Uint8Array(credentials.response.clientDataJSON)))
            }
        };
        debugger;
        $.ajax({
            url: '@Url.ActionLink(nameof(AccountController.CompleteRegistration), AccountController.Name))',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(encodedCredentials),
            success: function() {
                window.location.href = '/';
            },
            error: function() {
                console.error('Error from server...');
            }
        });
    })
    .catch((error) => {
        console.error(error);
    });
</script>
